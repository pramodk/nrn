#=============================================================================
# Azure Pipeline settings
#=============================================================================

# Used for neuron-nightly wheel
variables:
  NEURON_NIGHTLY_TAG: '-nightly'

# Nightly build master for pypi upload
schedules:
- cron: "0 0 * * *"
  branches:
    include:
    - master

# Auto cancel old PR builds
pr:
  autoCancel: true

# Trigger build for certain branches only
trigger:
- master
- releases/*
- pramodk/azure-windows-ci

jobs:

- job: 'ManyLinuxWheels'
  condition: eq(1,2)
  pool:
    vmImage: 'ubuntu-18.04'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
      Python38:
        python.version: '3.8'
  steps:
  - script: |
      docker run --rm \
        -w /root/nrn \
        -v $PWD:/root/nrn \
        -e NEURON_NIGHTLY_TAG \
        'neuronsimulator/neuron_wheel' \
        packaging/python/build_wheels.bash linux $(python.version)
    displayName: 'Building ManyLinux Wheel'

  - script: |
      sudo apt update
      sudo apt install -y mpich openmpi-bin libopenmpi-dev libmpich-dev
    displayName: 'Install Test System Depdendencies'

  - template: ci/azure-wheel-test-upload.yml


# Jobs to build OSX wheels natively
- job: 'MacOSWheels'
  condition: eq(1,2)
  pool:
    vmImage: 'macOS-10.15'
  strategy:
    matrix:
      Python35:
        python.version: '3.5'
        python.org.version: '3.5.4'
      Python36:
        python.version: '3.6'
        python.org.version: '3.6.8'
      Python37:
        python.version: '3.7'
        python.org.version: '3.7.7'
      Python38:
        python.version: '3.8'
        python.org.version: '3.8.2'
  steps:

  - script: |
      if [ "$(python.org.version)" == "3.5.4" ]; then
        installer=python-$(python.org.version)-macosx10.6.pkg
      else
        installer=python-$(python.org.version)-macosx10.9.pkg
      fi
      url=https://www.python.org/ftp/python/$(python.org.version)/$installer
      curl $url -o $installer
      sudo installer -pkg $installer -target /
    displayName: 'Install Python from python.org'

  - script: |
      brew cask install xquartz
      brew install flex bison mpich
      brew unlink mpich && brew install openmpi
    displayName: 'Install OSX System Depdendencies'

  - script: |
      export MACOSX_DEPLOYMENT_TARGET=10.9
      export PATH=/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:$PATH
      export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
      packaging/python/build_wheels.bash osx $(python.version)
    displayName: 'Build MacOS Wheel'

  - template: ci/azure-wheel-test-upload.yml

- job: 'WindowsInstaller'
  pool:
    vmImage: windows-2019
  variables:
    MSYS2_ROOT: C:\msys64
    MSYS2_ARCH: x86_64
    COMPILER: gcc
    HTTP_RETRIES: 4
  steps:
    - pwsh: |
        #Invoke-WebRequest -MaximumRetryCount 2 -OutFile nrn.exe https://github.com/pramodk/nrn/releases/download/20200522.3/nrn8.0setup-AMD64.exe
        #Invoke-WebRequest -MaximumRetryCount 2 -OutFile nrn.exe https://github.com/pramodk/nrn/releases/download/nightly/nrn8.0setup-AMD64.exe
        Invoke-WebRequest -MaximumRetryCount 2 -OutFile nrn.exe https://github.com/pramodk/nrn/releases/download/nightly1/nrn8.0setup-AMD64.exe
        dir .
      displayName: "Download Installer"
    - script: |
        echo "1.------------------"
        .\nrn.exe /S
        echo "2.------------------"
        dir C:\nrn
      displayName: "Install EXE"
    - script: |
        dir .
        ::dir %BUILD_SOURCESDIRECTORY%\tmp\xx
        ::echo "1.------------------"
        ::tmp\xx\nrn.exe //S
        ::echo "2.------------------"
        ::tmp\xx\nrn.exe //S //D=D:\a\1\s\tmp
        ::echo "3.------------------"
        ::dir C:\
      displayName: "Check"
    - pwsh: |
        Get-Childitem 'C:\' -depth 1 -directory
        Get-Childitem 'C:\Program Files (x86)\Microsoft Visual Studio' -depth 5
        Get-Childitem 'C:\Program Files (x86)\MSBuild' -depth 3
        Get-Childitem 'C:\Program Files (x86)\Windows Kits\' -depth 3
        Get-Childitem 'C:\Program Files (x86)\Windows Kits\10' -depth 3
        Get-Childitem 'C:\Program Files (x86)\Windows Kits\8.1' -depth 3
        Get-Childitem 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\' -depth 2
        Get-Childitem 'C:\Program Files (x86)\Microsoft Visual Studio 14.0' -depth 3
      displayName: "Show Directory Structure (Begin)"
    - pwsh: |
        cp 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\rc.exe' 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\'
        cp 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\rcdll.dll' 'C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\bin\'
      displayName: "Copy missing files"
    - script: |
        choco install --no-progress msys2 --params="/InstallDir:%MSYS2_ROOT% /NoUpdate /NoPath"
      displayName: "Install MSYS2"
    - script: |
        set PATH=%MSYS2_ROOT%\usr\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem
        %MSYS2_ROOT%\usr\bin\pacman --noconfirm -Sy pacman
        %MSYS2_ROOT%\usr\bin\pacman --noconfirm -Syyuu
        %MSYS2_ROOT%\usr\bin\pacman --noconfirm -Syuu
      condition: eq(1,2)
      displayName: "Install and update MSYS2"
    - script: |
        choco install --no-progress nsis --version 3.05 -y --allow-downgrade
      displayName: "Install NSIS"
    - pwsh: |
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile msmpisetup.exe https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisetup.exe
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile msmpisdk.msi https://download.microsoft.com/download/a/5/2/a5207ca5-1203-491a-8fb8-906fd68ae623/msmpisdk.msi
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-3.5.exe https://www.python.org/ftp/python/3.5.4/python-3.5.4-amd64.exe
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-3.6.exe https://www.python.org/ftp/python/3.6.8/python-3.6.8-amd64.exe
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-3.7.exe https://www.python.org/ftp/python/3.7.7/python-3.7.7-amd64.exe
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-3.8.exe https://www.python.org/ftp/python/3.8.2/python-3.8.2-amd64.exe
        Invoke-WebRequest -MaximumRetryCount $env:HTTP_RETRIES -OutFile python-2.7.msi https://www.python.org/ftp/python/2.7.17/python-2.7.17.amd64.msi
        Invoke-WebRequest -OutFile EnVar_pugin.zip https://nsis.sourceforge.io/mediawiki/images/7/7f/EnVar_plugin.zip
        # extract this already as it's easy with powershell
        Expand-Archive EnVar_pugin.zip -DestinationPath "${env:ProgramFiles(x86)}\NSIS"
      displayName: "Download Installers"
    - script: |
        msmpisetup.exe -unattend -installroot C:\msmpi
        start /wait msiexec /i msmpisdk.msi /norestart /qn INSTALLDIR="C:\msmpi" ADDLOCAL=ALL
        :: unify installation directory
        dir C:\msmpi
        rename C:\msmpi\Bin  bin
        rename C:\msmpi\Lib  lib
        rename C:\msmpi\Include include
        dir C:\msmpi
        copy "c:\Windows\System32\msmpi.dll" "c:\msmpi\lib\x64\msmpi.dll"
        copy "c:\Windows\SysWoW64\msmpi.dll" "c:\msmpi\lib\x86\msmpi.dll"
      displayName: "Install and Setup MPI"
    - script: |
        python-3.5.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\python35
        python-3.6.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\python36
        python-3.7.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\python37
        python-3.8.exe /passive Include_pip=1 Include_test=0 PrependPath=1 DefaultJustForMeTargetDir=C:\python38
        start /wait msiexec /i python-2.7.msi /norestart /qn TARGETDIR="C:\python27" ADDLOCAL=ALL
        C:\python35\python.exe -m pip install numpy
        C:\python36\python.exe -m pip install numpy
        C:\python37\python.exe -m pip install numpy
        C:\python38\python.exe -m pip install numpy
        C:\python27\python.exe -m pip install numpy
      displayName: "Install Python"
    - script: |
        set PATH=%MSYS2_ROOT%\usr\bin;%SystemRoot%\system32;%SystemRoot%;%SystemRoot%\System32\Wbem
        if %COMPILER%==gcc ( set "TOOLCHAIN=mingw-w64-%MSYS2_ARCH%-toolchain" ) else ( set "TOOLCHAIN=mingw-w64-%MSYS2_ARCH%-clang" )
        %MSYS2_ROOT%\usr\bin\pacman --noconfirm --needed -S --disable-download-timeout ^
        git ^
        zip ^
        unzip ^
        base-devel ^
        mingw-w64-%MSYS2_ARCH%-cmake ^
        mingw-w64-%MSYS2_ARCH%-ncurses ^
        mingw-w64-%MSYS2_ARCH%-readline ^
        mingw-w64-%MSYS2_ARCH%-python2 ^
        mingw-w64-%MSYS2_ARCH%-python3 ^
        mingw64/mingw-w64-%MSYS2_ARCH%-cython ^
        mingw-w64-%MSYS2_ARCH%-python3-setuptools ^
        mingw-w64-%MSYS2_ARCH%-python3-pip ^
        %TOOLCHAIN%
      displayName: "Install MING2 Packages"
    - script: |
        %MSYS2_ROOT%\usr\bin\bash -lc "$BUILD_SOURCESDIRECTORY/build_azure.sh"
      displayName: "Build and Create Installer"
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.SourcesDirectory)\build\src\mswin\nrn8.0setup-AMD64.exe'
        artifactName: FirstNeuronExe
    - script: |
        echo "1............."
        set
        .\build\src\mswin\nrn8.0setup-AMD64.exe /S
        echo "2............."
        dir C:\nrn
        dir C:\nrn\lib\python
        dir C:\nrn\lib\python\neuron
        set
      displayName: "1. Install via Installer"
      condition: eq(1,1)
    - script: |
        set
        C:\python27\python -c "import neuron; neuron.test(); neuron.test_rxd(); quit()"
        C:\python35\python -c "import neuron; neuron.test(); neuron.test_rxd(); quit()"
        C:\python36\python -c "import neuron; neuron.test(); neuron.test_rxd(); quit()"
        C:\python37\python -c "import neuron; neuron.test(); neuron.test_rxd(); quit()"
        C:\python38\python -c "import neuron; neuron.test(); neuron.test_rxd(); quit()"
      condition: eq(1,1)
      displayName: "Test Installation"
    - task: GithubRelease@0
      inputs:
        gitHubConnection: pramodk-nrn-fork
        repositoryName: pramodk/nrn
        action: edit
        tagSource: manual
        tag: nightly1
        title: 'Latest nightly NEURON EXE release from Azure CI'
        isPreRelease: true
        assetUploadMode: delete
        addChangeLog: true
        assets: |
          $(Build.SourcesDirectory)\build\src\mswin\nrn8.0setup-AMD64.exe
      displayName: 'Create GitHub Release'
      condition: succeeded()
